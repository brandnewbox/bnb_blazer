- blazer_title @query.name
%nav.navbar.navbar-default.navbar-fixed-top
  .container
    .navbar-header
      %button.navbar-toggle.collapsed{"aria-expanded" => "false", "data-target" => "#navbar-collapse", "data-toggle" => "collapse", :type => "button"}
        %span.sr-only Toggle navigation
        %span.icon-bar
        %span.icon-bar
        %span.icon-bar
      = image_tag "bnb_intel_logo.png", class: "img-responsive"
    #navbar-collapse.collapse.navbar-collapse
      %ul.nav.navbar-nav
        .btn-group
          = link_to "Home", root_path, class: "btn btn-default", data: { type: "button" }
          %button.btn.btn-default.dropdown-toggle{"aria-expanded" => "false", "aria-haspopup" => "true", "data-toggle" => "dropdown", :type => "button"}
            %span.caret
            %span.sr-only Toggle Dropdown
          %ul.dropdown-menu
            %li= link_to "Checks", checks_path
            - if Blazer.uploads?
              %li= link_to "Uploads", uploads_path
            %li.divider{role: "separator"}
            %li= link_to "New Query", new_query_path
            %li= link_to "New Dashboard", new_dashboard_path
            - check_params = @query ? {query_id: @query.id} : {}
            %li= link_to "New Check", new_check_path(check_params)

      %ul.nav.navbar-nav.navbar-right
        %li= link_to "Edit", edit_query_path(@query, variable_params(@query)), class: "text-muted font-weight-bold px-1", disabled: !@query.editable?(blazer_user)
        %li= link_to "Fork", new_query_path(variable_params(@query).merge(fork_query_id: @query.id, data_source: @query.data_source, name: @query.name)), class: "text-muted font-weight-bold px-1"
        - if !@error && @success
          %li= link_to "Download", run_queries_path(query_id: @query.id, format: "csv", forecast: params[:forecast], cohort_period: params[:cohort_period]), params: {statement: @statement}, class: "text-muted font-weight-bold px-1"

#blazer-content
  %div{:style => "margin-bottom: 70px;"}
  - if @sql_errors.any?
    .alert.alert-danger
      %ul
        - @sql_errors.each do |message|
          %li= message
  %h3.text-center=@query.name
  - if @query.description.present?
    %p= @query.description
  = render partial: "blazer/variables", locals: {action: query_path(@query)}
  %pre#code
    %code= @statement
  - if @success
    #results
      %p.text-muted.text-uppercase Loading...
    :javascript
      function showRun(data) {
        $("#results").html(data)
        $("#results table").stupidtable(stupidtableCustomSettings).stickyTableHeaders({fixedOffset: 60})
      }

      function showError(message) {
        $("#results").addClass("query-error").html(message)
      }

      #{blazer_js_var "data", variable_params(@query).merge(statement: @statement, query_id: @query.id, data_source: @query.data_source)}
      
            runQuery(data, showRun, showError)
  - unless %w(mongodb).include?(Blazer.data_sources[@query.data_source].adapter)
    :javascript
      // do not highlight really long queries
      // this can lead to performance issues
      if ($("code").text().length < 10000) {
        hljs.highlightBlock(document.getElementById("code"));
      }
